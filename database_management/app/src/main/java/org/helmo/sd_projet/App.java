/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.helmo.sd_projet;

import org.helmo.sd_projet.commands.*;
import org.helmo.sd_projet.repository.FilmographyRepository;
import org.helmo.sd_projet.repository.JSONFilmographyRepository;
import org.helmo.sd_projet.storage.*;
import org.helmo.sd_projet.domain.*;
import org.helmo.sd_projet.storage.connection.ConnectionData;
import org.helmo.sd_projet.storage.connection.LocalhostConnectionData;
import org.helmo.sd_projet.storage.connection.MySQLConnectionData;

public class App {
    public static void main(String[] args) {
        Customers customers = new Customers();
        Persons persons = new Persons();
        Movies movies = new Movies();
        Reviews reviews = new Reviews();
        Categories categories = new Categories();

        ConnectionData mysql = new MySQLConnectionData();
        ConnectionData localhost = new LocalhostConnectionData();

        SQLFilmographyStorageFactory sqlFilmographyStorageFactory = new SQLFilmographyStorageFactory(localhost);
        try (FilmographyStorage filmographyStorage = sqlFilmographyStorageFactory.newStorage(customers, persons, movies,
                reviews, categories)) {
            FilmographyRepository filmographyRepository = new JSONFilmographyRepository(reviews, movies,
                    categories, filmographyStorage);
            final CommandMap map = new CommandMap(
                    new AddCategoryCommand(filmographyStorage, categories),
                    /*new AddCustomerCommand(filmographyStorage, customers),*/
                    new AddReviewCommand(customers, movies, reviews, filmographyStorage),
                    new CreateUserCommand(customers, filmographyStorage),
                    new AddPersonCommand(persons, filmographyStorage),
                    new AddMovieCommand(filmographyStorage, persons, movies, categories),
                    new ExportMovieCommand(filmographyRepository, filmographyStorage, movies),
                    new ImportMovieCommand(filmographyRepository, filmographyStorage));
            final FrontController controller = new FrontController(map);

            controller.loop();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
